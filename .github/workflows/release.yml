name: Release

on:
  workflow_dispatch:

concurrency: Release

jobs:
  set-release-version:
    if: github.repository_owner == 'Informatievlaanderen'
    name: Decide next version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
          persist-credentials: false

    - name: Setup Node.js
      uses: actions/setup-node@v3.5.1

    - name: Node version
      shell: bash
      run: node --version

    - name: Install NPM dependencies
      shell: bash
      run: npm ci

    - name: Run Semantic Release Dry-Run
      shell: bash
      run: npx semantic-release --dry-run
      env:
        BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
        GITHUB_TOKEN: ${{ secrets.VBR_GIT_RELEASE_TOKEN }}
        GIT_COMMIT: ${{ github.sha }}
        GIT_USERNAME: ${{ secrets.VBR_GIT_USER }}
        GIT_AUTHOR_NAME: ${{ secrets.VBR_GIT_USER }}
        GIT_COMMITTER_NAME: ${{ secrets.VBR_GIT_USER }}
        GIT_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
        GIT_AUTHOR_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
        GIT_COMMITTER_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}

    - name: Set Release Version
      id: set-version
      run: |
        [ ! -f semver ] && echo none > semver
        echo $(cat semver)
        echo ::set-output name=version::$(cat semver)
        echo RELEASE_VERSION=$(cat semver) >> $GITHUB_ENV
      shell: bash

  build-api-backoffice:
    name: Build Api BackOffice
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: parcel-registry
      build-target: Containerize_ApiBackOffice
      image-file: pr-api-backoffice-image.tar
      image-name: api-backoffice
      test-project: ParcelRegistry.Tests
      build-project: ParcelRegistry.Api.BackOffice
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-api-legacy:
    name: Build Api Legacy
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: parcel-registry
      build-target: Containerize_ApiLegacy
      image-file: pr-api-legacy-image.tar
      image-name: api-legacy
      test-project: ParcelRegistry.Tests
      build-project: ParcelRegistry.Api.Legacy
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-api-oslo:
    name: Build Api Oslo
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: parcel-registry
      build-target: Containerize_ApiOslo
      image-file: pr-api-oslo-image.tar
      image-name: api-oslo
      test-project: ParcelRegistry.Tests
      build-project: ParcelRegistry.Api.Oslo
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-api-extract:
    name: Build Api Extract
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: parcel-registry
      build-target: Containerize_ApiExtract
      image-file: pr-api-extract-image.tar
      image-name: api-extract
      test-project: ParcelRegistry.Tests
      build-project: ParcelRegistry.Api.Extract
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-projector:
    name: Build Projector
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: parcel-registry
      build-target: Containerize_Projector
      image-file: pr-projector-image.tar
      image-name: projector
      test-project: ParcelRegistry.Tests
      build-project: ParcelRegistry.Projector
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-projections-last-changed-list:
    name: Build projections last changed list
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: parcel-registry
      build-target: Containerize_ProjectionsLastChangedList
      image-file: pr-projections-last-changed-list-console-image.tar
      image-name: projections-last-changed-list-console
      test-project: Parcel.Tests
      build-project: Parcel.Projections.LastChangedList.Console
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-projections-backoffice:
    name: Build Projections BackOffice
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: parcel-registry
      build-target: Containerize_ProjectionsBackOffice
      image-file: pr-projections-backoffice-image.tar
      image-name: projections-backoffice
      test-project: ParcelRegistry.Tests
      build-project: ParcelRegistry.Projections.BackOffice
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-projections-syndication:
    name: Build Projections Syndication
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: parcel-registry
      build-target: Containerize_ProjectionsSyndication
      image-file: pr-projections-syndication-image.tar
      image-name: projections-syndication
      test-project: ParcelRegistry.Tests
      build-project: ParcelRegistry.Projections.Syndication
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-consumer-address:
    name: Build Consumer
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: parcel-registry
      build-target: Containerize_ConsumerAddress
      image-file: pr-consumer-address-image.tar
      image-name: consumer-address
      test-project: ParcelRegistry.Tests
      build-project: ParcelRegistry.Consumer.Address.Console
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-producer:
    name: Build Producer
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: parcel-registry
      build-target: Containerize_Producer
      image-file: pr-producer-image.tar
      image-name: producer
      test-project: ParcelRegistry.Tests
      build-project: ParcelRegistry.Producer
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-producer-snapshot-oslo:
    name: Build Producer Snapshot Oslo
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: parcel-registry
      build-target: Containerize_ProducerSnapshotOslo
      image-file: pr-producer-snapshot-oslo-image.tar
      image-name: producer-snapshot-oslo
      test-project: ParcelRegistry.Tests
      build-project: ParcelRegistry.Producer.Snapshot.Oslo
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-migrator-parcel:
    name: Build Migrator Parcel
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: parcel-registry
      build-target: Containerize_MigratorParcel
      image-file: pr-migrator-parcel-image.tar
      image-name: migrator-parcel
      test-project: ParcelRegistry.Tests
      build-project: ParcelRegistry.Migrator.Parcel
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-importer-grb:
    name: Build Parcel Importer Grb
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: parcel-registry
      build-target: Containerize_ImporterGrb
      image-file: pr-importer-grb-image.tar
      image-name: importer-grb
      test-project: ParcelRegistry.Tests
      build-project: ParcelRegistry.Importer.Grb
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-snapshot-verifier:
    name: Build Snapshot Verifier
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: parcel-registry
      build-target: Containerize_SnapshotVerifier
      image-file: pr-snapshot-verifier-image.tar
      image-name: snapshot-verifier
      test-project: ParcelRegistry.Tests
      build-project: ParcelRegistry.Snapshot.Verifier
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  pack-api-backoffice:
    name: Pack Api BackOffice
    uses: Informatievlaanderen/build-pipeline/.github/workflows/pack.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      pack-file: Be.Vlaanderen.Basisregisters.ParcelRegistry.Api.BackOffice
      test-project: ParcelRegistry.Tests
      build-project: ParcelRegistry.Api.BackOffice
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  pack-api-backoffice-abstractions:
    name: Pack Api BackOffice Abstractions
    uses: Informatievlaanderen/build-pipeline/.github/workflows/pack.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      pack-file: Be.Vlaanderen.Basisregisters.ParcelRegistry.Api.BackOffice.Abstractions
      test-project: ParcelRegistry.Tests
      build-project: ParcelRegistry.Api.BackOffice.Abstractions
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  pack-api-legacy:
    name: Pack Api Legacy
    uses: Informatievlaanderen/build-pipeline/.github/workflows/pack.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      pack-file: Be.Vlaanderen.Basisregisters.ParcelRegistry.Api.Legacy
      test-project: ParcelRegistry.Tests
      build-project: ParcelRegistry.Api.Legacy
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  pack-api-oslo:
    name: Pack Api Oslo
    uses: Informatievlaanderen/build-pipeline/.github/workflows/pack.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      pack-file: Be.Vlaanderen.Basisregisters.ParcelRegistry.Api.Oslo
      test-project: ParcelRegistry.Tests
      build-project: ParcelRegistry.Api.Oslo
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  pack-api-extract:
    name: Pack Api Extract
    uses: Informatievlaanderen/build-pipeline/.github/workflows/pack.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      pack-file: Be.Vlaanderen.Basisregisters.ParcelRegistry.Api.Extract
      test-project: ParcelRegistry.Tests
      build-project: ParcelRegistry.Api.Extract
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-lambda-backoffice:
    name: Build Lambda
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-lambda.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      lambda-name: lambda-backoffice
      test-project: ParcelRegistry.Tests
      build-project: ParcelRegistry.Api.BackOffice.Handlers.Lambda
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  release:
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: [ set-release-version,
      pack-api-backoffice,
      pack-api-backoffice-abstractions,
      pack-api-legacy,
      pack-api-oslo,
      pack-api-extract,
      build-api-backoffice,
      build-api-legacy,
      build-api-oslo,
      build-api-extract,
      build-projector,
      build-projections-backoffice,
      build-projections-syndication,
      build-projections-last-changed-list,
      build-consumer-address,
      build-producer,
      build-producer-snapshot-oslo,
      build-migrator-parcel,
      build-lambda-backoffice,
      build-importer-grb,
      build-snapshot-verifier
      ]
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
          persist-credentials: false

    - name: Cache NPM
      uses: actions/cache@v3
      env:
        cache-name: cache-npm
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-

    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
      shell: bash

    - name: Setup Node.js
      uses: actions/setup-node@v3

    - name: Setup Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: Node version
      shell: bash
      run: node --version

    - name: .NET version
      shell: bash
      run: dotnet --info

    - name: Python version
      shell: bash
      run: python --version

    - name: Install NPM dependencies
      shell: bash
      run: npm install --legacy-peer-deps

    - name: Install Python dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install requests markdown argparse

    - name: Download NuGet Api BackOffice
      uses: actions/download-artifact@v3
      continue-on-error: false
      with:
        name: nuget-Be.Vlaanderen.Basisregisters.ParcelRegistry.Api.BackOffice-${{ needs.set-release-version.outputs.version }}
        path: dist/nuget/

    - name: Download NuGet Api BackOffice Abstractions
      uses: actions/download-artifact@v3
      continue-on-error: false
      with:
        name: nuget-Be.Vlaanderen.Basisregisters.ParcelRegistry.Api.BackOffice.Abstractions-${{ needs.set-release-version.outputs.version }}
        path: dist/nuget/

    - name: Download NuGet Api Legacy
      uses: actions/download-artifact@v3
      continue-on-error: false
      with:
        name: nuget-Be.Vlaanderen.Basisregisters.ParcelRegistry.Api.Legacy-${{ needs.set-release-version.outputs.version }}
        path: dist/nuget/

    - name: Download NuGet Api Oslo
      uses: actions/download-artifact@v3
      continue-on-error: false
      with:
        name: nuget-Be.Vlaanderen.Basisregisters.ParcelRegistry.Api.Oslo-${{ needs.set-release-version.outputs.version }}
        path: dist/nuget/

    - name: Download NuGet Api Extract
      uses: actions/download-artifact@v3
      continue-on-error: false
      with:
        name: nuget-Be.Vlaanderen.Basisregisters.ParcelRegistry.Api.Extract-${{ needs.set-release-version.outputs.version }}
        path: dist/nuget/

    - name: Run Semantic Release
      shell: bash
      run: npx semantic-release
      env:
        BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
        GITHUB_TOKEN: ${{ secrets.VBR_GIT_RELEASE_TOKEN }}
        GIT_COMMIT: ${{ github.sha }}
        GIT_USERNAME: ${{ secrets.VBR_GIT_USER }}
        GIT_AUTHOR_NAME: ${{ secrets.VBR_GIT_USER }}
        GIT_COMMITTER_NAME: ${{ secrets.VBR_GIT_USER }}
        GIT_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
        GIT_AUTHOR_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
        GIT_COMMITTER_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}

    - name: Set Release Version
      id: set-version
      run: |
        [ ! -f semver ] && echo none > semver
        echo $(cat semver)
        echo ::set-output name=version::$(cat semver)
        echo RELEASE_VERSION=$(cat semver) >> $GITHUB_ENV
      shell: bash

  upload-lambda:
    name: Upload Lambda
    needs: [ release ]
    runs-on: ubuntu-latest
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.release.outputs.version != 'none') }}
    steps:
    - name: Download Lambda
      uses: actions/download-artifact@v3
      continue-on-error: false
      with:
        name: lambda-backoffice-${{ needs.release.outputs.version }}
        path: ~/

    - name: Configure AWS credentials (Test)
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_TST }}
        aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_TST }}
        aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

    - name: Login to Amazon ECR (Test)
      uses: aws-actions/amazon-ecr-login@v1.5.3

    - name: Push Lambda functions to S3 Test
      shell: bash
      run: |
        echo Push Lambda functions to S3 Test
        echo aws s3 cp ~/lambda.zip s3://196194905350-vbr-test-lam-par-sqsbackoffice/$SEMVER/lambda.zip
        aws s3 cp ~/lambda.zip s3://196194905350-vbr-test-lam-par-sqsbackoffice/$SEMVER/lambda.zip
      env:
        SEMVER: ${{ needs.release.outputs.version }}

    - name: Configure AWS credentials (Staging)
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.VBR_AWS_REGION }}

    - name: Login to Amazon ECR (Staging)
      uses: aws-actions/amazon-ecr-login@v1.5.3

    - name: Push Lambda functions to S3 Staging
      shell: bash
      run: |
        echo Push Lambda functions to S3 Staging
        echo aws s3 cp ~/lambda.zip s3://s3-vbr-stg-basisregisters-lam-pr-sqsbackofficehandlerfunction/$SEMVER/lambda.zip
        aws s3 cp ~/lambda.zip s3://s3-vbr-stg-basisregisters-lam-pr-sqsbackofficehandlerfunction/$SEMVER/lambda.zip
      env:
        SEMVER: ${{ needs.release.outputs.version }}

    - name: Configure AWS credentials (New Production)
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_NEWPRD }}
        aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_NEWPRD }}
        aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

    - name: Login to Amazon ECR (New Production)
      uses: aws-actions/amazon-ecr-login@v1.5.3

    - name: Push Lambda functions to S3 New Production
      shell: bash
      run: |
        echo Push Lambda functions to S3 New Production
        echo aws s3 cp ~/lambda.zip s3://077849980894-vbr-prd-lam-par-sqsbackoffice/$SEMVER/lambda.zip
        aws s3 cp ~/lambda.zip s3://077849980894-vbr-prd-lam-par-sqsbackoffice/$SEMVER/lambda.zip
      env:
        SEMVER: ${{ needs.release.outputs.version }}

    - name: Configure AWS credentials (Production)
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_PRD }}
        aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_PRD }}
        aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

    - name: Login to Amazon ECR (Production)
      uses: aws-actions/amazon-ecr-login@v1.5.3

    - name: Push Lambda functions to S3 Production
      shell: bash
      run: |
        echo Push Lambda functions to S3 Production
        echo aws s3 cp ~/lambda.zip s3://s3-vbr-prd-basisregisters-lam-pr-sqsbackofficehandlerfunction/$SEMVER/lambda.zip
        aws s3 cp ~/lambda.zip s3://s3-vbr-prd-basisregisters-lam-pr-sqsbackofficehandlerfunction/$SEMVER/lambda.zip
      env:
       SEMVER: ${{ needs.release.outputs.version }}

  publish_to_nuget:
    needs: [ release ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.release.outputs.version != 'none') }}
    name: Publish to NuGet
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ secrets.VBR_DOTNET_VERSION }}

    - name: .NET version
      shell: bash
      run: dotnet --info

    - name: Download NuGet package api-backoffice
      uses: actions/download-artifact@v3
      with:
        name: nuget-Be.Vlaanderen.Basisregisters.ParcelRegistry.Api.BackOffice-${{ needs.release.outputs.version }}
        path: ~/

    - name: Download NuGet package api-backoffice-abstractions
      uses: actions/download-artifact@v3
      with:
        name: nuget-Be.Vlaanderen.Basisregisters.ParcelRegistry.Api.BackOffice.Abstractions-${{ needs.release.outputs.version }}
        path: ~/

    - name: Download NuGet package api-legacy
      uses: actions/download-artifact@v3
      with:
        name: nuget-Be.Vlaanderen.Basisregisters.ParcelRegistry.Api.Legacy-${{ needs.release.outputs.version }}
        path: ~/

    - name: Download NuGet package api-oslo
      uses: actions/download-artifact@v3
      with:
        name: nuget-Be.Vlaanderen.Basisregisters.ParcelRegistry.Api.Oslo-${{ needs.release.outputs.version }}
        path: ~/

    - name: Download NuGet package api-extract
      uses: actions/download-artifact@v3
      with:
        name: nuget-Be.Vlaanderen.Basisregisters.ParcelRegistry.Api.Extract-${{ needs.release.outputs.version }}
        path: ~/

    - name: Publish packages to NuGet
      shell: bash
      run: |
        dotnet nuget push ~/Be.Vlaanderen.Basisregisters.ParcelRegistry.Api.BackOffice.$SEMVER.nupkg --source nuget.org --api-key $NUGET_API_KEY
        dotnet nuget push ~/Be.Vlaanderen.Basisregisters.ParcelRegistry.Api.BackOffice.Abstractions.$SEMVER.nupkg --source nuget.org --api-key $NUGET_API_KEY
        dotnet nuget push ~/Be.Vlaanderen.Basisregisters.ParcelRegistry.Api.Legacy.$SEMVER.nupkg --source nuget.org --api-key $NUGET_API_KEY
        dotnet nuget push ~/Be.Vlaanderen.Basisregisters.ParcelRegistry.Api.Oslo.$SEMVER.nupkg --source nuget.org --api-key $NUGET_API_KEY
        dotnet nuget push ~/Be.Vlaanderen.Basisregisters.ParcelRegistry.Api.Extract.$SEMVER.nupkg --source nuget.org --api-key $NUGET_API_KEY
      env:
        SEMVER: ${{  needs.release.outputs.version }}
        WORKSPACE: ${{ github.workspace }}
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

  publish_to_atlassian:
    needs: [ release ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.release.outputs.version != 'none') }}
    name: Publish to Atlassian
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Parse repository name
        run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
        shell: bash

      - name: Cache Paket
        uses: actions/cache@v3
        env:
          cache-name: cache-paket
        with:
          path: packages
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('paket.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Cache Python
        uses: actions/cache@v3
        env:
          cache-name: cache-pip
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-build-${{ env.cache-name }}

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install requests markdown argparse

      - name: Publish to Confluence
        shell: bash
        run: ./packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-confluence.sh
        env:
          CONFLUENCE_TITLE: ${{ env.REPOSITORY_NAME }}
          CONFLUENCE_USERNAME: ${{ secrets.VBR_CONFLUENCE_USER }}
          CONFLUENCE_PASSWORD: ${{ secrets.VBR_CONFLUENCE_PASSWORD }}

     # - name: Create Jira Release
     #   shell: bash
     #   run: ./packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-jira.sh
     #   env:
     #     CONFLUENCE_TITLE: ${{ env.REPOSITORY_NAME }}
     #     CONFLUENCE_USERNAME: ${{ secrets.VBR_CONFLUENCE_USER }}
     #     CONFLUENCE_PASSWORD: ${{ secrets.VBR_CONFLUENCE_PASSWORD }}
     #     JIRA_PREFIX: Parcel
     #     JIRA_PROJECT: GAWR
     #     JIRA_VERSION: ${{ needs.release.outputs.version }}

  push_images:
    if: needs.release.outputs.version != 'none'
    needs: [ release ]
    name: Push images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [
          'api-backoffice',
          'api-legacy',
          'api-oslo',
          'api-extract',
          'projector',
          'projections-syndication',
          'projections-backoffice',
          'projections-last-changed-list-console',
          'consumer-address',
          'producer',
          'producer-snapshot-oslo',
          'importer-grb',
          'snapshot-verifier'
          ]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_DEVOPS }}
          aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_DEVOPS }}
          aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1.5.3

      # Download artifact
      - name: Download artifact
        uses: actions/download-artifact@v3
        continue-on-error: false
        with:
          name: ${{ matrix.image }}-${{ needs.release.outputs.version }}
          path: ~/

      # Load artifact
      - name: Load artifact
        shell: bash
        run: |
          echo pr-$IMAGE-image.tar
          docker image load -i ~/pr-$IMAGE-image.tar
        env:
          IMAGE: ${{ matrix.image }}

      - name: Push artifacts to ECR
        shell: bash
        run: |
          echo $IMAGE:$SEMVER
          docker tag $BUILD_DOCKER_REGISTRY_TST/parcel-registry/$IMAGE:$SEMVER $BUILD_DOCKER_REGISTRY/parcel-registry/$IMAGE:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/parcel-registry/$IMAGE:$SEMVER
        env:
          BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_DEVOPS_DOCKER_REGISTRY }}
          IMAGE: ${{ matrix.image }}
          SEMVER: ${{ needs.release.outputs.version }}
          WORKSPACE: ${{ github.workspace }}

  push_images_to_staging:
    if: needs.release.outputs.version != 'none'
    needs: [ release ]
    name: Push images to Staging
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [
          'api-backoffice',
          'api-legacy',
          'api-oslo',
          'api-extract',
          'projector',
          'projections-syndication',
          'projections-backoffice',
          'projections-last-changed-list-console',
          'consumer-address',
          'producer',
          'producer-snapshot-oslo',
          'migrator-parcel',
          'importer-grb',
          'snapshot-verifier'
          ]
    steps:
      - name: Configure AWS credentials (Staging)
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

      - name: Login to Amazon ECR (Staging)
        uses: aws-actions/amazon-ecr-login@v1.5.3

      # Download artifact
      - name: Download artifact
        uses: actions/download-artifact@v3
        continue-on-error: false
        with:
          name: ${{ matrix.image }}-${{ needs.release.outputs.version }}
          path: ~/

      # Load artifact
      - name: Load artifact
        shell: bash
        run: |
          echo pr-$IMAGE-image.tar
          docker image load -i ~/pr-$IMAGE-image.tar
        env:
          IMAGE: ${{ matrix.image }}

      - name: Push artifacts to ECR Staging
        shell: bash
        run: |
          echo $IMAGE:$SEMVER
          docker tag $BUILD_DOCKER_REGISTRY_TST/parcel-registry/$IMAGE:$SEMVER $BUILD_DOCKER_REGISTRY/parcel-registry/$IMAGE:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/parcel-registry/$IMAGE:$SEMVER
        env:
          BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY }}
          IMAGE: ${{ matrix.image }}
          SEMVER: ${{ needs.release.outputs.version }}
          WORKSPACE: ${{ github.workspace }}

  push_images_to_newproduction:
    if: needs.release.outputs.version != 'none'
    needs: [ release ]
    name: Push images to New Production
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [
          'api-backoffice',
          'api-legacy',
          'api-oslo',
          'api-extract',
          'projector',
          'projections-syndication',
          'projections-backoffice',
          'consumer-address',
          'producer',
          'producer-snapshot-oslo',
          'migrator-parcel',
          'importer-grb',
          'snapshot-verifier'
          ]
    steps:
      - name: Configure AWS credentials (New Production)
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_NEWPRD }}
          aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_NEWPRD }}
          aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

      - name: Login to Amazon ECR (New Production)
        uses: aws-actions/amazon-ecr-login@v1.5.3

      # Download artifact
      - name: Download artifact
        uses: actions/download-artifact@v3
        continue-on-error: false
        with:
          name: ${{ matrix.image }}-${{ needs.release.outputs.version }}
          path: ~/

      # Load artifact
      - name: Load artifact
        shell: bash
        run: |
          echo pr-$IMAGE-image.tar
          docker image load -i ~/pr-$IMAGE-image.tar
        env:
          IMAGE: ${{ matrix.image }}

      - name: Push artifacts to ECR New Production
        shell: bash
        run: |
          echo $IMAGE:$SEMVER
          docker tag $BUILD_DOCKER_REGISTRY_TST/parcel-registry/$IMAGE:$SEMVER $BUILD_DOCKER_REGISTRY_NEWPRD/parcel-registry/$IMAGE:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY_NEWPRD/parcel-registry/$IMAGE:$SEMVER
        env:
          BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          BUILD_DOCKER_REGISTRY_NEWPRD: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_NEWPRD }}
          IMAGE: ${{ matrix.image }}
          SEMVER: ${{ needs.release.outputs.version }}
          WORKSPACE: ${{ github.workspace }}

  deploy_to_test_start_slack:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ push_images, upload-lambda, release ]
    name: Deploy to test started
    environment: test
    runs-on: ubuntu-latest

    steps:
    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo ""$GITHUB_REPOSITORY"" | awk -F / '{print $2}' | sed -e ""s/:refs//"") >> $GITHUB_ENV
      shell: bash

    - name: Notify deployment started
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: '#team-dinosaur-dev'
        slack-message: Deployment of parcel-registry to test has started
      env:
        SLACK_BOT_TOKEN: ${{ secrets.VBR_SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.VBR_NOTIFIER_CHANNEL_NAME }}
        REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}

  deploy_services_to_test:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ deploy_to_test_start_slack, release ]
    name: Deploy services to test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services: [
          'parcel-api',
          'parcel-backoffice-api',
          'parcel-consumer-address',
          'parcel-producer',
          'parcel-producer-snapshot-oslo',
          'parcel-projections',
          'parcel-projections-backoffice'
          ]
    steps:
    - name: Deploy services
      env:
        BUILD_URL: ${{ vars.VBR_AWS_BUILD_API_DEVOPS }}/${{matrix.services}}
        STATUS_URL: ${{ vars.VBR_AWS_BUILD_STATUS_API_DEVOPS }}/${{matrix.services}}
      uses: informatievlaanderen/awscurl-polling-action/polling-action@main
      with:
          environment: tst
          version: ${{ needs.release.outputs.version }}
          status-url: $STATUS_URL
          deploy-url: $BUILD_URL
          access-key: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_DEVOPS }}
          secret-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_DEVOPS }}
          deploy-target: 'agb_ecs_service'
          interval: 2
          domain: 'basisregisters'
          project: 'basisregisters'

    - name: Deploy services output
      shell: bash
      run: |
        echo build-uuid: ${{ steps.awscurl-polling-action.outputs.build-uuid }}
        echo Status: ${{ steps.awscurl-polling-action.outputs.status }}
        echo ${{ steps.awscurl-polling-action.outputs.final-message }}

  deploy_tasks_to_test:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ deploy_to_test_start_slack, release ]
    name: Deploy tasks to test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services: [          
          'parcel-importer-grb',
          'parcel-snapshot-verifier'
          ]

    steps:
    - name: Deploy tasks
      env:
        BUILD_URL: ${{ vars.VBR_AWS_BUILD_API_DEVOPS }}/${{matrix.services}}
        STATUS_URL: ${{ vars.VBR_AWS_BUILD_STATUS_API_DEVOPS }}/${{matrix.services}}
      uses: informatievlaanderen/awscurl-polling-action/polling-action@main
      with:
          environment: tst
          version: ${{ needs.release.outputs.version }}
          status-url: $STATUS_URL
          deploy-url: $BUILD_URL
          access-key: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_DEVOPS }}
          secret-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_DEVOPS }}
          deploy-target: 'ecs_scheduled_task'
          interval: 2
          domain: 'basisregisters'
          project: 'basisregisters'

    - name: Deploy tasks output
      shell: bash
      run: |
        echo build-uuid: ${{ steps.awscurl-polling-action.outputs.build-uuid }}
        echo Status: ${{ steps.awscurl-polling-action.outputs.status }}
        echo ${{ steps.awscurl-polling-action.outputs.final-message }}

  deploy_lambda_to_test:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ deploy_to_test_start_slack, release ]
    name: Deploy lambda to test
    runs-on: ubuntu-latest

    steps:
    - name: CD Lambda(s) Configure credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_TST }}
        aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_TST }}
        aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

    - name: Prepare Lambda(s)
      shell: bash
      run: |
        echo aws s3 cp s3://196194905350-vbr-test-lam-par-sqsbackoffice/$VERSION/lambda.zip s3://196194905350-vbr-test-lam-par-sqsbackoffice/lambda.zip --copy-props none
        aws s3 cp s3://196194905350-vbr-test-lam-par-sqsbackoffice/$VERSION/lambda.zip s3://196194905350-vbr-test-lam-par-sqsbackoffice/lambda.zip --copy-props none
      env:
        VERSION: ${{ needs.release.outputs.version }}

    - name: Promote Lambda(s)
      shell: bash
      run: |
        echo pulling awscurl docker image
        docker pull ghcr.io/okigan/awscurl:latest
        echo docker run --rm okigan/awscurl --access_key $ACCESS_KEY_ID --secret_key $SECRET_ACCESS_KEY_ID --region $REGION -X POST -d '{ "functionName": "pr-sqsbackofficefunction", "project": "basisregisters", "domain": "basisregisters" }' $PROMOTEURL/test
        docker run --rm okigan/awscurl --access_key $ACCESS_KEY_ID --secret_key $SECRET_ACCESS_KEY_ID --region $REGION -X POST -d '{ "functionName": "pr-sqsbackofficefunction", "project": "basisregisters", "domain": "basisregisters" }' $PROMOTEURL/test
      env:
        ACCESS_KEY_ID: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_TST }}
        SECRET_ACCESS_KEY_ID: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_TST }}
        REGION: ${{ secrets.VBR_AWS_REGION_PRD }}
        PROMOTEURL: ${{ secrets.VBR_AWS_PROMOTE_LAMBDA_BASEURL }}

  deploy_to_test_finish_slack:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ deploy_lambda_to_test, deploy_tasks_to_test, deploy_services_to_test ]
    name: Deploy to test finished
    runs-on: ubuntu-latest

    steps:
    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo ""$GITHUB_REPOSITORY"" | awk -F / '{print $2}' | sed -e ""s/:refs//"") >> $GITHUB_ENV
      shell: bash

    - name: Notify deployment finished
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: '#team-dinosaur-dev'
        slack-message: Deployment of parcel-registry to test has finished
      env:
        SLACK_BOT_TOKEN: ${{ secrets.VBR_SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.VBR_NOTIFIER_CHANNEL_NAME }}
        REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}

  deploy_to_staging_start_slack:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ push_images_to_staging, upload-lambda, release ]
    name: Deploy to staging started
    environment: stg
    runs-on: ubuntu-latest

    steps:
    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo ""$GITHUB_REPOSITORY"" | awk -F / '{print $2}' | sed -e ""s/:refs//"") >> $GITHUB_ENV
      shell: bash

    - name: Notify deployment started
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: '#team-dinosaur-dev'
        slack-message: Deployment of parcel-registry to staging has started
      env:
        SLACK_BOT_TOKEN: ${{ secrets.VBR_SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.VBR_NOTIFIER_CHANNEL_NAME }}
        REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}

  deploy_to_staging:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ deploy_to_staging_start_slack, release ]
    name: Deploy to staging
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services: [
          'parcel-registry-api',
          'parcel-registry-backoffice-api',
          'parcel-registry-consumer-address',
          'parcel-registry-producer',
          'parcel-registry-producer-snapshot-oslo',
          'parcel-registry-projections',
          'parcel-registry-projections-backoffice',
          'parcel-registry-importer-grb',
          'parcel-registry-snapshot-verifier'
          ]
    steps:
    - name: CD services
      env:
        BUILD_URL: ${{ secrets.VBR_AWS_BUILD_API }}/${{matrix.services}}
        STATUS_URL: ${{ secrets.VBR_AWS_BUILD_STATUS_API }}/${{matrix.services}}
      uses: informatievlaanderen/awscurl-polling-action/polling-action@main
      with:
          environment: stg
          version: ${{ needs.release.outputs.version }}
          status-url: $STATUS_URL
          deploy-url: $BUILD_URL
          access-key: ${{ secrets.VBR_AWS_BUILD_USER_ACCESS_KEY_ID }}
          secret-key: ${{ secrets.VBR_AWS_BUILD_USER_SECRET_ACCESS_KEY }}
          region: eu-west-1
          interval: 2

    - name: output CD services
      shell: bash
      run: |
        echo build-uuid: ${{ steps.awscurl-polling-action.outputs.build-uuid }}
        echo Status: ${{ steps.awscurl-polling-action.outputs.status }}
        echo ${{ steps.awscurl-polling-action.outputs.final-message }}

  deploy_lambda_to_staging:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ deploy_to_staging, release ]
    name: Deploy lambda to staging
    runs-on: ubuntu-latest

    steps:
    - name: CD Lambda(s) Configure credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

    - name: Prepare Lambda(s)
      shell: bash
      run: |
        echo aws s3 cp s3://s3-vbr-stg-basisregisters-lam-pr-sqsbackofficehandlerfunction/$VERSION/lambda.zip s3://s3-vbr-stg-basisregisters-lam-pr-sqsbackofficehandlerfunction/lambda.zip --copy-props none
        aws s3 cp s3://s3-vbr-stg-basisregisters-lam-pr-sqsbackofficehandlerfunction/$VERSION/lambda.zip s3://s3-vbr-stg-basisregisters-lam-pr-sqsbackofficehandlerfunction/lambda.zip --copy-props none
      env:
        VERSION: ${{ needs.release.outputs.version }}

    - name: Promote Lambda(s)
      shell: bash
      run: |
        echo pulling awscurl docker image
        docker pull ghcr.io/okigan/awscurl:latest
        echo docker run --rm okigan/awscurl --access_key $ACCESS_KEY_ID --secret_key $SECRET_ACCESS_KEY_ID --region $REGION -X POST -d '{ "functionName": "pr-sqsbackofficehandlerfunction", "project": "basisregisters", "domain": "basisregisters" }' $PROMOTEURL/stg
        docker run --rm okigan/awscurl --access_key $ACCESS_KEY_ID --secret_key $SECRET_ACCESS_KEY_ID --region $REGION -X POST -d '{ "functionName": "pr-sqsbackofficehandlerfunction", "project": "basisregisters", "domain": "basisregisters" }' $PROMOTEURL/stg
      env:
        ACCESS_KEY_ID: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_TST }}
        SECRET_ACCESS_KEY_ID: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_TST }}
        REGION: ${{ secrets.VBR_AWS_REGION_PRD }}
        PROMOTEURL: ${{ secrets.VBR_AWS_PROMOTE_LAMBDA_BASEURL }}

  deploy_to_staging_finish_slack:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ deploy_lambda_to_staging ]
    name: Deploy to staging finished
    runs-on: ubuntu-latest

    steps:
    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo ""$GITHUB_REPOSITORY"" | awk -F / '{print $2}' | sed -e ""s/:refs//"") >> $GITHUB_ENV
      shell: bash

    - name: Notify deployment finished
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: '#team-dinosaur-dev'
        slack-message: Deployment of parcel-registry to staging has finished
      env:
        SLACK_BOT_TOKEN: ${{ secrets.VBR_SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.VBR_NOTIFIER_CHANNEL_NAME }}
        REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}
