// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParcelRegistry.Projections.Legacy;

#nullable disable

namespace ParcelRegistry.Projections.Legacy.Migrations
{
    [DbContext(typeof(LegacyContext))]
    [Migration("20240524110656_DeleteV1")]
    partial class DeleteV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Be.Vlaanderen.Basisregisters.ProjectionHandling.Runner.ProjectionStates.ProjectionStateItem", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DesiredState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DesiredStateChangedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Position")
                        .HasColumnType("bigint");

                    b.HasKey("Name");

                    b.ToTable("ProjectionStates", "ParcelRegistryLegacy");
                });

            modelBuilder.Entity("ParcelRegistry.Projections.Legacy.ParcelDetailV2.ParcelDetailAddressV2", b =>
                {
                    b.Property<Guid>("ParcelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressPersistentLocalId")
                        .HasColumnType("int");

                    b.HasKey("ParcelId", "AddressPersistentLocalId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ParcelId", "AddressPersistentLocalId"));

                    b.HasIndex("AddressPersistentLocalId");

                    b.ToTable("ParcelAddressesV2", "ParcelRegistryLegacy");
                });

            modelBuilder.Entity("ParcelRegistry.Projections.Legacy.ParcelDetailV2.ParcelDetailV2", b =>
                {
                    b.Property<Guid>("ParcelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CaPaKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GmlType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastEventHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<string>("StatusAsString")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Status");

                    b.Property<DateTimeOffset>("VersionTimestampAsDateTimeOffset")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("VersionTimestamp");

                    b.HasKey("ParcelId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ParcelId"), false);

                    b.HasAlternateKey("CaPaKey");

                    b.HasIndex("CaPaKey");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("CaPaKey"));

                    b.HasIndex("Removed");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Removed"), new[] { "CaPaKey", "StatusAsString", "VersionTimestampAsDateTimeOffset" });

                    b.HasIndex("StatusAsString");

                    b.ToTable("ParcelDetailsV2", "ParcelRegistryLegacy");
                });

            modelBuilder.Entity("ParcelRegistry.Projections.Legacy.ParcelDetailV2.ParcelDetailV2ListViewCount", b =>
                {
                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.ToTable((string)null);

                    b.ToView("vw_ParcelDetailV2ListCount", "ParcelRegistryLegacy");
                });

            modelBuilder.Entity("ParcelRegistry.Projections.Legacy.ParcelDetailWithCountV2.ParcelDetailAddressV2", b =>
                {
                    b.Property<Guid>("ParcelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressPersistentLocalId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ParcelId", "AddressPersistentLocalId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ParcelId", "AddressPersistentLocalId"));

                    b.HasIndex("AddressPersistentLocalId");

                    b.ToTable("ParcelAddressesWithCountV2", "ParcelRegistryLegacy");
                });

            modelBuilder.Entity("ParcelRegistry.Projections.Legacy.ParcelDetailWithCountV2.ParcelDetailV2", b =>
                {
                    b.Property<Guid>("ParcelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CaPaKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GmlType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastEventHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<string>("StatusAsString")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Status");

                    b.Property<DateTimeOffset>("VersionTimestampAsDateTimeOffset")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("VersionTimestamp");

                    b.HasKey("ParcelId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ParcelId"), false);

                    b.HasAlternateKey("CaPaKey");

                    b.HasIndex("CaPaKey");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("CaPaKey"));

                    b.HasIndex("Removed");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Removed"), new[] { "CaPaKey", "StatusAsString", "VersionTimestampAsDateTimeOffset" });

                    b.HasIndex("StatusAsString");

                    b.ToTable("ParcelDetailsWithCountV2", "ParcelRegistryLegacy");
                });

            modelBuilder.Entity("ParcelRegistry.Projections.Legacy.ParcelSyndication.ParcelSyndicationItem", b =>
                {
                    b.Property<long>("Position")
                        .HasColumnType("bigint");

                    b.Property<string>("AddressPersistentLocalIdsAsString")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AddressPersistentLocalIds");

                    b.Property<string>("AddressesAsString")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AddressIds");

                    b.Property<int?>("Application")
                        .HasColumnType("int");

                    b.Property<string>("CaPaKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChangeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventDataAsXml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ExtendedWkbGeometry")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTimeOffset>("LastChangedOnAsDateTimeOffset")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LastChangedOn");

                    b.Property<int?>("Modification")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Organisation")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParcelId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RecordCreatedAtAsDateTimeOffset")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("RecordCreatedAt");

                    b.Property<string>("StatusAsString")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.Property<DateTimeOffset>("SyndicationItemCreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Position");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Position"));

                    b.HasIndex("ParcelId");

                    b.HasIndex("Position")
                        .HasDatabaseName("CI_ParcelSyndication_Position")
                        .HasAnnotation("SqlServer:ColumnStoreIndex", "");

                    b.ToTable("ParcelSyndication", "ParcelRegistryLegacy");
                });

            modelBuilder.Entity("ParcelRegistry.Projections.Legacy.ParcelDetailV2.ParcelDetailAddressV2", b =>
                {
                    b.HasOne("ParcelRegistry.Projections.Legacy.ParcelDetailV2.ParcelDetailV2", null)
                        .WithMany("Addresses")
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParcelRegistry.Projections.Legacy.ParcelDetailWithCountV2.ParcelDetailAddressV2", b =>
                {
                    b.HasOne("ParcelRegistry.Projections.Legacy.ParcelDetailWithCountV2.ParcelDetailV2", null)
                        .WithMany("Addresses")
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParcelRegistry.Projections.Legacy.ParcelDetailV2.ParcelDetailV2", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("ParcelRegistry.Projections.Legacy.ParcelDetailWithCountV2.ParcelDetailV2", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
