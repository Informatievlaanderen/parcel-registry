// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ParcelRegistry.Projections.Integration;

#nullable disable

namespace ParcelRegistry.Projections.Integration.Migrations
{
    [DbContext(typeof(IntegrationContext))]
    [Migration("20240429095431_CombinedIndexIsRemovedStatus")]
    partial class CombinedIndexIsRemovedStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Be.Vlaanderen.Basisregisters.ProjectionHandling.Runner.ProjectionStates.ProjectionStateItem", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("DesiredState")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DesiredStateChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<long>("Position")
                        .HasColumnType("bigint");

                    b.HasKey("Name");

                    b.ToTable("ProjectionStates", "integration_parcel");
                });

            modelBuilder.Entity("ParcelRegistry.Projections.Integration.ParcelLatestItem.ParcelLatestItem", b =>
                {
                    b.Property<Guid>("ParcelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("parcel_id");

                    b.Property<string>("CaPaKey")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("capakey");

                    b.Property<Geometry>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("geometry");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<string>("Namespace")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("namespace");

                    b.Property<string>("OsloStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("oslo_status");

                    b.Property<string>("Puri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("puri");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("VersionAsString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version_as_string");

                    b.Property<DateTimeOffset>("VersionTimestampAsDateTimeOffset")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("version_timestamp");

                    b.HasKey("ParcelId");

                    b.HasIndex("CaPaKey");

                    b.HasIndex("Geometry");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geometry"), "GIST");

                    b.HasIndex("IsRemoved");

                    b.HasIndex("OsloStatus");

                    b.HasIndex("Status");

                    b.HasIndex("IsRemoved", "Status");

                    b.ToTable("parcel_latest_items", "integration_parcel");
                });

            modelBuilder.Entity("ParcelRegistry.Projections.Integration.ParcelLatestItem.ParcelLatestItemAddress", b =>
                {
                    b.Property<Guid>("ParcelId")
                        .HasColumnType("uuid")
                        .HasColumnName("parcel_id");

                    b.Property<int>("AddressPersistentLocalId")
                        .HasColumnType("integer")
                        .HasColumnName("address_persistent_local_id");

                    b.Property<string>("CaPaKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("capakey");

                    b.HasKey("ParcelId", "AddressPersistentLocalId");

                    b.HasIndex("AddressPersistentLocalId");

                    b.HasIndex("CaPaKey");

                    b.HasIndex("ParcelId");

                    b.ToTable("parcel_latest_item_addresses", "integration_parcel");
                });

            modelBuilder.Entity("ParcelRegistry.Projections.Integration.ParcelVersion.ParcelVersion", b =>
                {
                    b.Property<long>("Position")
                        .HasColumnType("bigint")
                        .HasColumnName("position");

                    b.Property<Guid>("ParcelId")
                        .HasColumnType("uuid")
                        .HasColumnName("parcel_id");

                    b.Property<string>("CaPaKey")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("capakey");

                    b.Property<string>("CreatedOnAsString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_on_as_string");

                    b.Property<DateTimeOffset>("CreatedOnTimestampAsDateTimeOffset")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_timestamp");

                    b.Property<Geometry>("Geometry")
                        .HasColumnType("geometry")
                        .HasColumnName("geometry");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<string>("Namespace")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("namespace");

                    b.Property<string>("OsloStatus")
                        .HasColumnType("text")
                        .HasColumnName("oslo_status");

                    b.Property<string>("Puri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("puri");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("VersionAsString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version_as_string");

                    b.Property<DateTimeOffset>("VersionTimestampAsDateTimeOffset")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("version_timestamp");

                    b.HasKey("Position", "ParcelId");

                    b.HasIndex("CaPaKey");

                    b.HasIndex("Geometry");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geometry"), "GIST");

                    b.HasIndex("IsRemoved");

                    b.HasIndex("OsloStatus");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("VersionTimestampAsDateTimeOffset");

                    b.ToTable("parcel_version", "integration_parcel");
                });

            modelBuilder.Entity("ParcelRegistry.Projections.Integration.ParcelVersion.ParcelVersionAddress", b =>
                {
                    b.Property<long>("Position")
                        .HasColumnType("bigint")
                        .HasColumnName("position");

                    b.Property<Guid>("ParcelId")
                        .HasColumnType("uuid")
                        .HasColumnName("parcel_id");

                    b.Property<int>("AddressPersistentLocalId")
                        .HasColumnType("integer")
                        .HasColumnName("address_persistent_local_id");

                    b.Property<string>("CaPaKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("capakey");

                    b.Property<int>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("count");

                    b.HasKey("Position", "ParcelId", "AddressPersistentLocalId");

                    b.HasIndex("AddressPersistentLocalId");

                    b.HasIndex("CaPaKey");

                    b.HasIndex("ParcelId");

                    b.HasIndex("Position");

                    b.ToTable("parcel_version_addresses", "integration_parcel");
                });
#pragma warning restore 612, 618
        }
    }
}
